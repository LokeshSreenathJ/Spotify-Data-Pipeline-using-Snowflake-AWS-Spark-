//CREATING DATABASE
CREATE OR REPLACE DATABASE DATABASE_PRACTICE;
//CREATING SCHEMA
CREATE OR REPLACE SCHEMA DATABASE_PRACTICE.SPOTIFY_WAREHOUSE;
//CREATING A EXTERNAL STAGE TO LOAD DATA FROM S3
CREATE OR REPLACE STAGE DATABASE_PRACTICE.SPOTIFY_WAREHOUSE.AWS_STAGE_ALBUM
URL = 's3://spotify-project-ljakka2/transformed_data/album/'
CREDENTIALS = (AWS_KEY_ID = 'AKIA335YZ6JxxXXXXXX' AWS_SECRET_KEY ='REqDu9rX1IzFA7AXXXXXXXXX');

//Creating ALBUM Table
CREATE  OR REPLACE TABLE DATABASE_PRACTICE.SPOTIFY_WAREHOUSE.ALBUM
(album_id VARCHAR(255),
album_name VARCHAR(255),
album_uri VARCHAR(255),
available_markets VARCHAR(10),
release_date VARCHAR(15),
total_tracks INT)
;
//Creating ARTIST Table
CREATE  OR REPLACE TABLE DATABASE_PRACTICE.SPOTIFY_WAREHOUSE.ARTIST
(items_artist_id VARCHAR(255),
items_artist_name VARCHAR(255),
items_artist_uri VARCHAR(255)
)
;
//Creating TRACK TABLE
CREATE  OR REPLACE TABLE DATABASE_PRACTICE.SPOTIFY_WAREHOUSE.TRACK
(items_track_id VARCHAR(255),
items_track_name VARCHAR(255),
items_track_uri VARCHAR(255),
items_track_popularity INT,
items_album_id VARCHAR(255),
items_artist_id VARCHAR(255),
items_track_duration NUMERIC,
items_track_added VARCHAR(255));


COPY INTO DATABASE_PRACTICE.SPOTIFY_WAREHOUSE.ALBUM
FROM @AWS_STAGE_ALBUM
FILE_FORMAT = (type = csv field_delimiter = "," skip_header=0);


